import { describe, it, expect, beforeEach, vi } from 'vitest'
import { screen, waitFor, fireEvent } from '@testing-library/react'
import { BrowserRouter } from 'react-router-dom'
import { ConfigProvider, message } from 'antd'
import MerchantList from '../MerchantList'
import { merchantService } from '../../../services/merchantService'
import { renderWithProviders, setupUserEvent } from '../../../test/utils/render'

// Mock merchant service
vi.mock('../../../services/merchantService', () => ({
  merchantService: {
    getMerchants: vi.fn(),
    deleteMerchant: vi.fn(),
    toggleMerchantStatus: vi.fn()
  }
}))

// Mock useNavigate
const mockNavigate = vi.fn()
vi.mock('react-router-dom', async () => {
  const actual = await vi.importActual('react-router-dom')
  return {
    ...actual,
    useNavigate: () => mockNavigate
  }
})

// Mock antd message
vi.mock('antd', async () => {
  const actual = await vi.importActual('antd')
  return {
    ...actual,
    message: {
      success: vi.fn(),
      error: vi.fn(),
      warning: vi.fn(),
      info: vi.fn()
    }
  }
})

describe('MerchantList', () => {
  const mockMerchants = [
    {
      id: 1,
      name: 'ÊµãËØïÂïÜÊà∑1',
      code: 'M001',
      contact: 'Âº†‰∏â',
      phone: '13800138001',
      email: 'merchant1@test.com',
      address: 'ÊµãËØïÂú∞ÂùÄ1',
      status: 'active' as const,
      permissions: ['project_1', 'venue_1'],
      createdAt: '2024-01-01T00:00:00Z',
      updatedAt: '2024-01-01T00:00:00Z'
    },
    {
      id: 2,
      name: 'ÊµãËØïÂïÜÊà∑2',
      code: 'M002',
      contact: 'ÊùéÂõõ',
      phone: '13800138002',
      email: 'merchant2@test.com',
      address: 'ÊµãËØïÂú∞ÂùÄ2',
      status: 'inactive' as const,
      permissions: [],
      createdAt: '2024-01-02T00:00:00Z',
      updatedAt: '2024-01-02T00:00:00Z'
    }
  ]

  const mockUser = {
    id: 1,
    name: 'ÊµãËØïÁî®Êà∑',
    email: 'test@example.com',
    userType: 'tenant_admin',
    status: 'active'
  }

  beforeEach(() => {
    vi.clearAllMocks()
    mockNavigate.mockReset()
  })

  describe('Êï∞ÊçÆÂ±ïÁ§∫ÂäüËÉΩ', () => {
    it('Â∫îËØ•Ê∏≤ÊüìÂïÜÊà∑ÂàóË°®', async () => {
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: mockMerchants,
        total: 2,
        page: 1,
        pageSize: 10
      })

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(screen.getByText('ÂïÜÊà∑ÁÆ°ÁêÜ')).toBeInTheDocument()
        expect(screen.getByText('ÊµãËØïÂïÜÊà∑1')).toBeInTheDocument()
        expect(screen.getByText('ÊµãËØïÂïÜÊà∑2')).toBeInTheDocument()
      })
    })

    it('Â∫îËØ•ÊòæÁ§∫Ê≠£Á°ÆÁöÑÁä∂ÊÄÅÊ†áÁ≠?, async () => {
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: mockMerchants,
        total: 2,
        page: 1,
        pageSize: 10
      })

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(screen.getAllByText('ÂêØÁî®')).toHaveLength(1)
        expect(screen.getByText('ÂÅúÁî®')).toBeInTheDocument()
      })
    })

    it('Â∫îËØ•ÊòæÁ§∫Ê≠£Á°ÆÁöÑÊùÉÈôêÊï∞Èá?, async () => {
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: mockMerchants,
        total: 2,
        page: 1,
        pageSize: 10
      })

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(screen.getByText('2')).toBeInTheDocument() // ÊµãËØïÂïÜÊà∑1Êú?‰∏™ÊùÉÈô?
        expect(screen.getByText('0')).toBeInTheDocument() // ÊµãËØïÂïÜÊà∑2Êú?‰∏™ÊùÉÈô?
      })
    })

    it('Â∫îËØ•ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄ?, async () => {
      (merchantService.getMerchants as any).mockImplementation(() => 
        new Promise(resolve => setTimeout(() => resolve({
          merchants: mockMerchants,
          total: 2,
          page: 1,
          pageSize: 10
        }), 100))
      )

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      // Ê£ÄÊü•Âä†ËΩΩÁä∂ÊÄ?- Ë°®Ê†ºÂ∫îËØ•ÊúâloadingÂ±ûÊÄ?
      const table = document.querySelector('.ant-table')
      expect(table).toBeInTheDocument()
      
      await waitFor(() => {
        expect(screen.getByText('ÊµãËØïÂïÜÊà∑1')).toBeInTheDocument()
      })
    })

    it('Â∫îËØ•Â§ÑÁêÜÁ©∫Êï∞ÊçÆÁä∂ÊÄ?, async () => {
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: [],
        total: 0,
        page: 1,
        pageSize: 10
      })

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(screen.getByText('ÂïÜÊà∑ÁÆ°ÁêÜ')).toBeInTheDocument()
        // Ant Design Table ‰ºöÊòæÁ§?"ÊöÇÊó†Êï∞ÊçÆ" ÊàñÁ±ª‰ººÁöÑÁ©∫Áä∂ÊÄÅÊñáÊú?
        const table = document.querySelector('.ant-table-tbody')
        expect(table).toBeInTheDocument()
      })
    })

    it('Â∫îËØ•Â§ÑÁêÜÈîôËØØÁä∂ÊÄ?, async () => {
      (merchantService.getMerchants as any).mockRejectedValue(new Error('ÁΩëÁªúÈîôËØØ'))

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(message.error).toHaveBeenCalledWith('Âä†ËΩΩÂïÜÊà∑ÂàóË°®Â§±Ë¥•')
      })
    })
  })

  describe('ÊêúÁ¥¢ÂäüËÉΩ', () => {
    it('Â∫îËØ•ËÉΩÂ§üÊêúÁ¥¢ÂïÜÊà∑', async () => {
      const user = setupUserEvent()
      
      // ÂàùÂßãÂä†ËΩΩ
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: mockMerchants,
        total: 2,
        page: 1,
        pageSize: 10
      })

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(screen.getByText('ÊµãËØïÂïÜÊà∑1')).toBeInTheDocument()
      })

      // Ê®°ÊãüÊêúÁ¥¢
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: [mockMerchants[0]],
        total: 1,
        page: 1,
        pageSize: 10
      })

      const searchInput = screen.getByPlaceholderText('ÊêúÁ¥¢ÂïÜÊà∑ÂêçÁß∞„ÄÅÁºñÁ†ÅÊàñËÅîÁ≥ª‰∫?)
      await user.type(searchInput, 'ÊµãËØïÂïÜÊà∑1')
      
      const searchButton = screen.getByRole('button', { name: /ÊêúÁ¥¢/ })
      await user.click(searchButton)
      
      await waitFor(() => {
        expect(merchantService.getMerchants).toHaveBeenCalledWith({
          page: 1,
          pageSize: 10,
          search: 'ÊµãËØïÂïÜÊà∑1',
          status: undefined
        })
      })
    })

    it('Â∫îËØ•ËÉΩÂ§üÊåâÁä∂ÊÄÅÁ≠õÈÄ?, async () => {
      const user = setupUserEvent()
      
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: mockMerchants,
        total: 2,
        page: 1,
        pageSize: 10
      })

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(screen.getByText('ÊµãËØïÂïÜÊà∑1')).toBeInTheDocument()
      })

      // Ê®°ÊãüÁä∂ÊÄÅÁ≠õÈÄ?
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: [mockMerchants[0]],
        total: 1,
        page: 1,
        pageSize: 10
      })

      const statusSelect = screen.getByPlaceholderText('Áä∂ÊÄÅÁ≠õÈÄ?)
      await user.click(statusSelect)
      
      const activeOption = screen.getByText('ÂêØÁî®')
      await user.click(activeOption)
      
      await waitFor(() => {
        expect(merchantService.getMerchants).toHaveBeenCalledWith({
          page: 1,
          pageSize: 10,
          search: '',
          status: 'active'
        })
      })
    })

    it('Â∫îËØ•ËÉΩÂ§üÊ∏ÖÈô§ÊêúÁ¥¢Êù°‰ª∂', async () => {
      const user = setupUserEvent()
      
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: mockMerchants,
        total: 2,
        page: 1,
        pageSize: 10
      })

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(screen.getByText('ÊµãËØïÂïÜÊà∑1')).toBeInTheDocument()
      })

      const searchInput = screen.getByPlaceholderText('ÊêúÁ¥¢ÂïÜÊà∑ÂêçÁß∞„ÄÅÁºñÁ†ÅÊàñËÅîÁ≥ª‰∫?)
      await user.type(searchInput, 'ÊµãËØï')
      
      // Ê∏ÖÈô§ÊêúÁ¥¢
      const clearButton = document.querySelector('.ant-input-clear-icon')
      if (clearButton) {
        await user.click(clearButton)
        
        await waitFor(() => {
          expect(merchantService.getMerchants).toHaveBeenCalledWith({
            page: 1,
            pageSize: 10,
            search: '',
            status: undefined
          })
        })
      }
    })
  })

  describe('Êìç‰ΩúÊåâÈíÆÂäüËÉΩ', () => {
    it('Â∫îËØ•ËÉΩÂ§üÂØºËà™Âà∞Êñ∞Â¢ûÂïÜÊà∑È°µÈù?, async () => {
      const user = setupUserEvent()
      
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: [],
        total: 0,
        page: 1,
        pageSize: 10
      })

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      const addButton = screen.getByRole('button', { name: /Êñ∞Â¢ûÂïÜÊà∑/ })
      await user.click(addButton)
      
      expect(mockNavigate).toHaveBeenCalledWith('/merchants/new')
    })

    it('Â∫îËØ•ËÉΩÂ§üÂØºËà™Âà∞ÁºñËæëÂïÜÊà∑È°µÈù?, async () => {
      const user = setupUserEvent()
      
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: mockMerchants,
        total: 2,
        page: 1,
        pageSize: 10
      })

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(screen.getByText('ÊµãËØïÂïÜÊà∑1')).toBeInTheDocument()
      })

      const editButtons = screen.getAllByTitle('ÁºñËæë')
      await user.click(editButtons[0])
      
      expect(mockNavigate).toHaveBeenCalledWith('/merchants/1/edit')
    })

    it('Â∫îËØ•ËÉΩÂ§üÊü•ÁúãÂïÜÊà∑ËØ¶ÊÉÖ', async () => {
      const user = setupUserEvent()
      
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: mockMerchants,
        total: 2,
        page: 1,
        pageSize: 10
      })

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(screen.getByText('ÊµãËØïÂïÜÊà∑1')).toBeInTheDocument()
      })

      const viewButtons = screen.getAllByTitle('Êü•ÁúãËØ¶ÊÉÖ')
      await user.click(viewButtons[0])
      
      // Ê£ÄÊü•ËØ¶ÊÉÖÊäΩÂ±âÊòØÂê¶ÊâìÂºÄ
      await waitFor(() => {
        expect(screen.getByText('ÂïÜÊà∑ËØ¶ÊÉÖ')).toBeInTheDocument()
      })
    })

    it('Â∫îËØ•ËÉΩÂ§üÂàáÊç¢ÂïÜÊà∑Áä∂ÊÄ?, async () => {
      const user = setupUserEvent()
      
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: mockMerchants,
        total: 2,
        page: 1,
        pageSize: 10
      })

      (merchantService.toggleMerchantStatus as any).mockResolvedValue({
        ...mockMerchants[0],
        status: 'inactive'
      })

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(screen.getByText('ÊµãËØïÂïÜÊà∑1')).toBeInTheDocument()
      })

      const toggleButtons = screen.getAllByText('ÂÅúÁî®')
      await user.click(toggleButtons[0])
      
      await waitFor(() => {
        expect(merchantService.toggleMerchantStatus).toHaveBeenCalledWith(1, 'inactive')
        expect(message.success).toHaveBeenCalledWith('ÂÅúÁî®ÊàêÂäü')
      })
    })

    it('Â∫îËØ•ËÉΩÂ§üÂà†Èô§ÂïÜÊà∑', async () => {
      const user = setupUserEvent()
      
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: mockMerchants,
        total: 2,
        page: 1,
        pageSize: 10
      })

      (merchantService.deleteMerchant as any).mockResolvedValue(undefined)

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(screen.getByText('ÊµãËØïÂïÜÊà∑1')).toBeInTheDocument()
      })

      const deleteButtons = screen.getAllByTitle('Âà†Èô§')
      await user.click(deleteButtons[0])
      
      // Á°ÆËÆ§Âà†Èô§ÂØπËØùÊ°?
      await waitFor(() => {
        expect(screen.getByText('Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™ÂïÜÊà∑ÂêóÔº?)).toBeInTheDocument()
      })

      const confirmButton = screen.getByText('Á°ÆÂÆö')
      await user.click(confirmButton)
      
      await waitFor(() => {
        expect(merchantService.deleteMerchant).toHaveBeenCalledWith(1)
        expect(message.success).toHaveBeenCalledWith('Âà†Èô§ÊàêÂäü')
      })
    })

    it('Â∫îËØ•Â§ÑÁêÜÂà†Èô§Â§±Ë¥•', async () => {
      const user = setupUserEvent()
      
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: mockMerchants,
        total: 2,
        page: 1,
        pageSize: 10
      })

      (merchantService.deleteMerchant as any).mockRejectedValue(new Error('Âà†Èô§Â§±Ë¥•'))

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(screen.getByText('ÊµãËØïÂïÜÊà∑1')).toBeInTheDocument()
      })

      const deleteButtons = screen.getAllByTitle('Âà†Èô§')
      await user.click(deleteButtons[0])
      
      const confirmButton = screen.getByText('Á°ÆÂÆö')
      await user.click(confirmButton)
      
      await waitFor(() => {
        expect(message.error).toHaveBeenCalledWith('Âà†Èô§Â§±Ë¥•')
      })
    })

    it('Â∫îËØ•ËÉΩÂ§üÊâìÂºÄÊùÉÈôêËÆæÁΩÆÊ®°ÊÄÅÊ°Ü', async () => {
      const user = setupUserEvent()
      
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: mockMerchants,
        total: 2,
        page: 1,
        pageSize: 10
      })

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(screen.getByText('ÊµãËØïÂïÜÊà∑1')).toBeInTheDocument()
      })

      const permissionButtons = screen.getAllByTitle('ÊùÉÈôêËÆæÁΩÆ')
      await user.click(permissionButtons[0])
      
      // Ê≥®ÊÑèÔºöËøôÈáåÈúÄË¶ÅÊ†πÊçÆÂÆûÈôÖÁöÑPermissionModalÁªÑ‰ª∂Êù•È™åËØ?
      // Áî±‰∫éPermissionModalÊòØ‰∏Ä‰∏™Áã¨Á´ãÁªÑ‰ª∂ÔºåËøôÈáå‰∏ªË¶ÅÊµãËØïÁÇπÂáª‰∫ã‰ª∂
      expect(permissionButtons[0]).toBeInTheDocument()
    })
  })

  describe('ÂàÜÈ°µÂäüËÉΩ', () => {
    it('Â∫îËØ•ËÉΩÂ§üÂàáÊç¢È°µÁ†Å', async () => {
      const user = setupUserEvent()
      
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: mockMerchants,
        total: 20,
        page: 1,
        pageSize: 10
      })

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(screen.getByText('ÊµãËØïÂïÜÊà∑1')).toBeInTheDocument()
      })

      // Ê®°ÊãüÁÇπÂáªÁ¨?È°?
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: [],
        total: 20,
        page: 2,
        pageSize: 10
      })

      const nextPageButton = document.querySelector('.ant-pagination-next')
      if (nextPageButton) {
        await user.click(nextPageButton)
        
        await waitFor(() => {
          expect(merchantService.getMerchants).toHaveBeenCalledWith({
            page: 2,
            pageSize: 10,
            search: '',
            status: undefined
          })
        })
      }
    })

    it('Â∫îËØ•ËÉΩÂ§üÊîπÂèòÈ°µÈù¢Â§ßÂ∞è', async () => {
      const user = setupUserEvent()
      
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: mockMerchants,
        total: 20,
        page: 1,
        pageSize: 10
      })

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(screen.getByText('ÊµãËØïÂïÜÊà∑1')).toBeInTheDocument()
      })

      // Ê®°ÊãüÊîπÂèòÈ°µÈù¢Â§ßÂ∞è
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: mockMerchants,
        total: 20,
        page: 1,
        pageSize: 20
      })

      const pageSizeSelector = document.querySelector('.ant-select-selector')
      if (pageSizeSelector) {
        await user.click(pageSizeSelector)
        
        const option20 = screen.getByText('20 Êù?È°?)
        if (option20) {
          await user.click(option20)
          
          await waitFor(() => {
            expect(merchantService.getMerchants).toHaveBeenCalledWith({
              page: 1,
              pageSize: 20,
              search: '',
              status: undefined
            })
          })
        }
      }
    })
  })

  describe('ÊùÉÈôêÊ£ÄÊü?, () => {
    it('Â∫îËØ•Ê†πÊçÆÁî®Êà∑ÊùÉÈôêÊòæÁ§∫Êìç‰ΩúÊåâÈíÆ', async () => {
      (merchantService.getMerchants as any).mockResolvedValue({
        merchants: mockMerchants,
        total: 2,
        page: 1,
        pageSize: 10
      })

      renderWithProviders(<MerchantList />, { user: mockUser })
      
      await waitFor(() => {
        expect(screen.getByText('ÊµãËØïÂïÜÊà∑1')).toBeInTheDocument()
        // È™åËØÅÊâÄÊúâÊìç‰ΩúÊåâÈíÆÈÉΩÂ≠òÂú®ÔºàÂõ†‰∏∫ÊòØtenant_adminÔº?
        expect(screen.getAllByTitle('ÁºñËæë')).toHaveLength(2)
        expect(screen.getAllByTitle('Âà†Èô§')).toHaveLength(2)
        expect(screen.getAllByTitle('ÊùÉÈôêËÆæÁΩÆ')).toHaveLength(2)
      })
    })
  })
})
